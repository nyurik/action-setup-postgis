name: Setup PostgreSQL and PostGIS for Linux/macOS/Windows
author: Yuri Astrakhan
description: Setup PostgreSQL server and install PostGIS extension.
branding:
  icon: database
  color: purple
inputs:
  username:
    description: The username of the user to setup.
    default: postgres
    required: false
  password:
    description: The password of the user to setup.
    default: postgres
    required: false
  database:
    description: The database name to setup and grant permissions to created user.
    default: postgres
    required: false
  port:
    description: The server port to listen on.
    default: "5432"
    required: false
  postgres-version:
    description: The version of PostgreSQL to install.
    default: "17"
    required: false
  postgis_version:
    description: The version of PostGIS to install.
    default: ""
    required: false
  cached-dir:
    # TODO: move to runner's temp dir, help wanted
    description: Where should the temporary downloads be placed. Used to download and cache PostGIS binary.
    default: "downloads"
    required: false
outputs:
  connection-uri:
    description: The connection URI to connect to PostgreSQL.
    value: ${{ steps.pg.outputs.connection-uri }}
  service-name:
    description: The service name with connection parameters.
    value: ${{ steps.pg.outputs.service-name }}
runs:
  using: composite
  steps:
    - name: Setup PostgreSQL for Linux/macOS/Windows
      id: pg
      uses: ikalnytskyi/action-setup-postgres@v7
      with:
        username: "${{ inputs.username }}"
        password: "${{ inputs.password }}"
        database: "${{ inputs.database }}"
        port: "${{ inputs.port }}"
        postgres-version: "${{ inputs.postgres-version }}"
        
    - name: Install PostGIS (Linux)
      if: runner.os == 'Linux'
      run: |
        # Detect installed PostgreSQL version (major only)
        PG_VERSION=$(postgres --version | awk '{print $3}' | cut -d. -f1)
        [[ "$PG_VERSION" =~ ^[0-9]+$ ]] || (echo "Failed to detect Postgres major version" && exit 1)
        echo "Detected PostgreSQL major version: $PG_VERSION"
        
        # Install PostGIS
        REPO_URL="https://apt.postgresql.org/pub/repos/apt/"
        wget -qO - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /usr/share/keyrings/postgresql.gpg >/dev/null
        echo "deb [signed-by=/usr/share/keyrings/postgresql.gpg] $REPO_URL $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list >/dev/null
        sudo apt update
        sudo apt-get install postgresql-$PG_VERSION-postgis-3
      shell: bash

    - name: Check PostgreSQL version (macOS)
      if: runner.os == 'macOS'
      id: pg-version-mac
      shell: bash
      run: |
        # Get major version using psql
        PG_VERSION=$(psql -t -A -c "SELECT split_part(version(), ' ', 2)" '${{ steps.pg.outputs.connection-uri }}' | cut -d. -f1)
        echo "Found PostgreSQL major version: $PG_VERSION"
        
        # Output version for next steps
        echo "version=$PG_VERSION" >> $GITHUB_OUTPUT

    - name: Install PostGIS on macOS
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # If no version specified, install latest
        if [[ -z "${{ inputs.postgis_version }}" ]]; then
          brew install postgis
          exit 0
        fi
        
        # Read version mapping from JSON file
        FORMULA_URL=$(jq -r '."${{ inputs.postgis_version }}"' ${GITHUB_ACTION_PATH}/postgis-macos-versions.json)
        
        if [[ "$FORMULA_URL" == "null" ]]; then
          echo "Error: PostGIS version ${{ inputs.postgis_version }} is not supported on macOS"
          exit 1
        fi

        # Download formula file
        if ! wget "$FORMULA_URL" -O ./postgis.rb; then
          echo "Error: Failed to download formula from $FORMULA_URL"
          exit 1
        fi

        # Modify formula to depend on specific PostgreSQL version
        PG_VERSION="${{ steps.pg-version-mac.outputs.version }}"
        sed -i '' "s/depends_on \"postgresql\"/depends_on \"postgresql@${PG_VERSION}\"/" ./postgis.rb

        # Install from local file
        brew install --HEAD ./postgis.rb

        # Cleanup
        rm -f ./postgis.rb

    - name: Detect PostgreSQL Version (Windows)
      if: runner.os == 'Windows'
      id: pg-version
      shell: pwsh
      run: |
        echo "PowerShell version: ${PSVersionTable.PSVersion}"
        # Get major version number (first 2 digits) from PostgreSQL server version number (format: XXYYZZ)
        $PG_VERSION = psql -t -A -c "SHOW server_version_num" '${{ steps.pg.outputs.connection-uri }}' | ForEach-Object { $_.Substring(0,2) }
        echo "Using PostgreSQL version: $PG_VERSION"
        Add-Content $env:GITHUB_OUTPUT "version=$PG_VERSION"

    - name: Detect PGDATA directory (Windows)
      if: runner.os == 'Windows'
      id: pgdata
      shell: pwsh
      run: |
        $PGDATA = psql -t -A -c "SHOW data_directory;" '${{ steps.pg.outputs.connection-uri }}'
        echo "PGDATA directory: $PGDATA"
        echo "PGDATA=$PGDATA" >> $env:GITHUB_ENV

    - name: Decide Postgis version (Windows)
      if: runner.os == 'Windows'
      id: postgis-ver
      shell: pwsh
      run: |
        $PG_VERSION = '${{ steps.pg-version.outputs.version }}'
        
        if ("${{ inputs.postgis_version }}" -ne "") {
          $pgis_bundle = "postgis-bundle-pg$PG_VERSION-${{ inputs.postgis_version }}x64"
          $pgis_bundle_url_main = "https://download.osgeo.org/postgis/windows/pg$PG_VERSION/$pgis_bundle.zip"
          $pgis_bundle_url_archive = "https://download.osgeo.org/postgis/windows/pg$PG_VERSION/archive/$pgis_bundle.zip"
          $pgis_bundle_url = $null
          $urls = @($pgis_bundle_url_main, $pgis_bundle_url_archive)
          foreach ($url in $urls) {
            try {
              Invoke-WebRequest -Uri $url -Method Head -ErrorAction Stop
              $pgis_bundle_url = $url
              break
            } catch {
              continue
            }
          }
          if ($pgis_bundle_url -eq $null) {
            Write-Error "Could not find PostGIS bundle at either $pgis_bundle_url_main or $pgis_bundle_url_archive"
            exit 1
          }
        } else {
          $postgis_page = "https://download.osgeo.org/postgis/windows/pg$PG_VERSION"
          echo "Detecting PostGIS version from $postgis_page for PostgreSQL $PG_VERSION"
          $pgis_bundle = (Invoke-WebRequest -Uri $postgis_page -ErrorAction Stop).Links.Where({$_.href -match "^postgis.*zip$"}).href
          if (!$pgis_bundle) {
            Write-Error "Could not find latest PostGIS version in $postgis_page that would match  ^postgis.*zip$  pattern"
            exit 1
          }
          $pgis_bundle = [IO.Path]::ChangeExtension($pgis_bundle, [NullString]::Value)
          $pgis_bundle_url = "$postgis_page/$pgis_bundle.zip"
        }

        Add-Content $env:GITHUB_OUTPUT "pgis_bundle=$pgis_bundle"
        Add-Content $env:GITHUB_OUTPUT "pgis_bundle_url=$pgis_bundle_url"

    - name: Cache Postgis Download (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      id: cache-downloads
      with:
        path: ${{ inputs.cached-dir }}
        key: ${{ runner.os }}-${{ steps.postgis-ver.outputs.pgis_bundle_url }}

    - name: Download Postgis (Windows)
      if: runner.os == 'Windows' && steps.postgis-ver.outputs.cache-hit != 'true'
      shell: pwsh
      # Download Postgis bundle if not in cache
      env:
        PGIS_BUNDLE: ${{ steps.postgis-ver.outputs.pgis_bundle }}
        PGIS_BUNDLE_URL: ${{ steps.postgis-ver.outputs.pgis_bundle_url }}
      run: |
        echo "Downloading $env:PGIS_BUNDLE from $env:PGIS_BUNDLE_URL"
        $postgis_zip = "postgis.zip"
        Invoke-WebRequest $env:PGIS_BUNDLE_URL -OutFile $postgis_zip -ErrorAction Stop

        echo "Extracting ${{ inputs.cached-dir }}\$env:PGIS_BUNDLE\*"
        Remove-Item ${{ inputs.cached-dir }} -Recurse -Force -ErrorAction Ignore
        echo "Expanded $((Expand-Archive $postgis_zip -DestinationPath ${{ inputs.cached-dir }} -PassThru).count) files from $postgis_zip"
        echo "Moved $((Move-Item -Path "${{ inputs.cached-dir }}\$env:PGIS_BUNDLE\*" -Destination ${{ inputs.cached-dir }} -Force -PassThru).count) files to ${{ inputs.cached-dir }}"
        Remove-Item $postgis_zip
        if (!(Test-Path "${{ inputs.cached-dir }}\*")) {
          Write-Error "Could not find PostGIS files in ${{ inputs.cached-dir }}"
          exit 1
        }

    - name: Install Postgis (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        PGDATA: ${{ env.PGDATA }}
      run: |
        if (!(Test-Path "${{ inputs.cached-dir }}\*")) {
          Write-Error "Could not find PostGIS files in ${{ inputs.cached-dir }}"
          exit 1
        }
        
        # Set PG_ROOTDIR environment variable
        echo "PG_ROOTDIR=$env:PROGRAMFILES\PostgreSQL\${{ steps.pg-version.outputs.version }}" >> $env:GITHUB_ENV
        $env:PGROOT = "$env:PROGRAMFILES\PostgreSQL\${{ steps.pg-version.outputs.version }}"
        
        # Copy PostGIS files to PostgreSQL directory
        echo "Copying PostGIS files to $env:PGROOT"
        Copy-Item -Path "${{ inputs.cached-dir }}\*" -Destination $env:PGROOT -Force -Recurse -ErrorAction Continue
        
    - name: Enable PostGIS extension
      run: psql -v ON_ERROR_STOP=1 -c 'CREATE EXTENSION IF NOT EXISTS postgis;' '${{ steps.pg.outputs.connection-uri }}'
      shell: bash
